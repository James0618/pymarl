import torch
import torch.nn as nn
import torch.nn.functional as F


class NewAgent(nn.Module):
    def __init__(self, observation_shape, args):
        super(NewAgent, self).__init__()
        self.args = args

        self.policy = nn.Sequential(
            nn.Linear(observation_shape + args.rnn_hidden_dim, args.rnn_hidden_dim),
            nn.ReLU(),
            nn.Linear(args.rnn_hidden_dim, args.n_actions)
        )
        self.transition_model = TransitionModel(observation_shape=observation_shape, args=args)

    def forward(self, inputs, state):
        x = torch.cat((inputs, state), dim=-1)
        q = self.policy(x)

        return q


class TransitionModel(nn.Module):
    def __init__(self, observation_shape, args):
        """
        first, take the hidden state as the agents' state,
        and, the rnn output the prediction of observations.
        """
        super(TransitionModel, self).__init__()
        self.args = args

        # observation here contain "observation" of agents and their last actions
        self.from_actions = nn.Linear(observation_shape, args.rnn_hidden_dim)
        self.transition = nn.GRUCell(args.rnn_hidden_dim, args.rnn_hidden_dim)

        # predict the "observation" of agents and state value
        self.pred_observation = nn.Linear(args.rnn_hidden_dim, observation_shape - args.n_agents - args.n_actions)
        self.pred_value = nn.Linear(args.rnn_hidden_dim, 1)

    def forward(self, observations, state):
        features = F.relu(self.from_actions(observations))
        state = state.reshape(-1, self.args.rnn_hidden_dim)
        next_state = self.transition(features, state)
        pred_observation = self.pred_observation(next_state)
        pred_value = self.pred_value(next_state)

        return pred_observation, pred_value, next_state

    def init_hidden(self):
        # make hidden states on same device as model
        return self.from_actions.weight.new(1, self.args.rnn_hidden_dim).zero_()


class OpponentModel(nn.Module):
    def __init__(self, args):
        """
        take the state generated by transition model as opponents' converted state,
        and transfer the opponents' actions
        """
        super(OpponentModel, self).__init__()
        self.args = args

        self.opponent = nn.Sequential(
            nn.Linear(args.rnn_hidden_dim, args.rnn_hidden_dim),
            nn.ReLU(),
            nn.Linear(args.rnn_hidden_dim, 10),
            nn.Softmax()
        )

    def forward(self, state):
        # TODO: Add GMM to the opponent model!
        latent_actions = self.opponent(state)

        return latent_actions
